#!/usr/bin/env ansible-playbook
---

###
## Licenced under CC-BY
###

- hosts: 'all:!localhost'
  become: yes
  order: inventory
  serial:
    - 1

  vars:
    # disable hostkey check and other things if host is installed first
    ansible_ssh_extra_args:
      -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
    skip_update_reboot: yes
    backup_motd: yes

  tasks:
    - name: 'disable sophos'
      shell: '/opt/sophos-av/bin/savdctl disable'
      ignore_errors: yes
        
        
    - name: Apt Update
      apt:
        update-cache: yes

    - name: Aptitude must be present
      apt:
        name: aptitude

    - name: Check for upgradeable
      apt:
        upgrade: 'yes'
      check_mode: yes
      register: upgradeable

    - name: Show me
      debug:
        msg: "{{ upgradeable.stdout_lines }}"

    - name: 'get current hostname fqdn of the server'
      set_fact:
        fqdn_hn: "{{ alias_fqdn | default( ansible_host ) | lower }}"

    - name: 'set hostname variable'
      set_fact:
        hostname_var: "{{ fqdn_hn.split('.')[0] }}"

    - name: 'change hostname'
      hostname:
        name: "{{ hostname_var }}"

    - name: 'ensure local route in /etc/hosts'
      shell: 'if ! grep -q -e "127\.0\.[0-1]\.1\s*{{ hostname_var }}" /etc/hosts ; then echo "127.0.1.1       {{ hostname_var }}" >> /etc/hosts ; echo "changed"; else echo "ok" ; fi'
      register: hostchanged
      changed_when:
        - '"changed" in hostchanged.stdout'
      failed_when:
        - hostchanged.rc != 0

    - name: 'Ensure timezone is set correct'
      include_role:
        name: timezone

    - name: 'apt update - since Ansible could not do anything without this command ...'
      command:
        cmd:  'apt-get update'
        warn: no
      become: yes

    - name: 'roll out Message of the Day'
      include_role:
        name: motd_server
      when: motd_active is defined and motd_active

    - name: 'install basic toolset and configuration'
      include_role:
        name: install_basics

    - name: 'install docker tools'
      include_role:
        name: docker_host
      when: docker_host is defined and docker_host

    - name: 'create logrotate config'
      include_role:
        name: logrotate
      when: logrotate is defined

    - name: 'configure basic firewall'
      include_role:
        name: firewall

    - name: Update all packages to the latest version
      apt:
        upgrade: 'yes'
        state: latest


    - name: 'enable sophos'
      shell: '/opt/sophos-av/bin/savdctl enable'
      ignore_errors: yes

    - name: Pause for 1 minutes
      pause:
        minutes: 1

...
