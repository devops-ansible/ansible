---

# Tell user, which stack will be worked on
- debug:
    msg: "Now container stack *{{ stack.name | mandatory }}* will be worked on:"

- name: "prepare container name"
  set_fact:
    workstack:  "{{ stack | preparestack }}"
    containers: []

# `include_*` is executed in sequence, `import_*` would be executed before
# starting all tasks. So we shuold use `include_*`.

- name: 'prepare MySQL container'
  include_tasks: add_mysql.yml
  when: ( workstack.mysql is defined and workstack.mysql )

- name: 'prepare MariaDB container'
  include_tasks: add_mariadb.yml
  when: ( workstack.mariadb is defined and workstack.mariadb )

- name: 'prepare PostgreSQL container'
  include_tasks: add_postgres.yml
  when: ( workstack.postgres is defined and workstack.postgres )

- name: 'combine all containers and the mainapplication'
  set_fact:
    ## ToDo â€“ Main Application and real additional containers
    # stackitems: "{{ containers + [ mainapplication ] }}"
    stackitems: "{{ containers + stack.containers | default([]) }}"

# bring everything together within the stackitems variable
- name: 'Combine all container information to let them run'
  set_fact:
    stackitems: "{{ stackitems | adjustNetworks | prepareSharedHome ( workstack.name ) | prepareContainerNames ( stack ) }}"
    datacontainer: "{{ default_datacontainer }}"

# the data container collects all mounted data (bind mounts and volumes)
# and therefor eases up the backup process
- name: 'prepare data for data container'
  set_fact:
    stack_data: "{{ stackitems | prepareDataContainer ( workstack.name, docker_home, { 'volumes': datacontainer_volumes | default( [] ) } )}}"

- name: 'prepare datacontainer for easing up backups'
  set_fact:
    localdatacontainer: "{{ datacontainer | combine ( stack_data | combine ( { 'name': workstack.name + '_' + datacontainer.name, 'shared_home_app': workstack.name } ) ) }}"

# combine stackitems and datacontainer
- name: 'Combine all containers with the data container'
  set_fact:
    stackitems: "{{ stackitems + [ localdatacontainer ] }}"
  when: localdatacontainer.volumes is defined and localdatacontainer.volumes | length > datacontainer_volumes | length or
        localdatacontainer.directories is defined and localdatacontainer.directories | length >= 1 or
        localdatacontainer.mountfiles is defined and localdatacontainer.mountfiles | length >= 1

- name: 'Finalize all container information to let them run'
  set_fact:
    stackitems: "{{ stackitems | unifyVolumes | ensurePullRun }}"

- name: 'DEBUG: Print all stack items to be run'
  debug:
    msg: '{{ stackitems }}'
  when: ( debug is defined and debug )

- name: 'DEBUG: Wait for user to continue'
  pause:
    prompt: "Should we continue? (yes/no - default: yes)"
  register: continue_cnt
  when: ( debug is defined and debug )

- name: 'Fail if user skipps'
  fail:
    msg: 'User aborted the run'
  when: debug is defined and
        debug and
        continue_cnt.user_input is defined and
        not ( continue_cnt.user_input == '' ) and
        not ( continue_cnt.user_input | bool )

# finally call docker_container role for every container that has to be controlled
- name: 'Create and manage containers for the Docker stack.'
  include_role:
    name: docker_container
  with_items: "{{ stackitems }}"
  loop_control:
    loop_var: container
  when: ( debug is not defined or not debug ) or
        continue_cnt.user_input is defined and (
          continue_cnt.user_input == '' or
          continue_cnt.user_input | bool
        )

...
