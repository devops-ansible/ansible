---

- name: prepare the installation
  become: yes
  block:

    - name: Install all prerequisite tools needed for this install routine
      package:
        name: "{{ item.name }}"
        state: "{{ item.state | default( package_state) }}"
      with_items: "{{ install_docker.prerequisites }}"

    - name: Add the official Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: "deb https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install all tools needed for Docker to run
      package:
        name: "{{ item.name }}"
        state: "{{ item.state | default( package_state) }}"
      with_items: "{{ install_docker.tools }}"

  rescue:

    - name: "Rescue #1 – Install docker via install script"
      block:

        - command: "curl -sSL https://get.docker.com | sh"

      rescue:

        - name: "Rescue #2 – install docker.io"
          package:
            name:  "docker.io"
            state: "present"

- name: define Docker service overrides
  become: yes
  block:

    - name: stop Docker service
      service:
        name: docker
        state: stopped

    - name: ensure, the needed directory exists
      file:
        path: "/etc/systemd/system/docker.service.d/"
        state: directory

    - name: set docker service override file in place
      template:
        src: "docker_service_override.conf.j2"
        dest: "/etc/systemd/system/docker.service.d/override.conf"
        owner: root
        group: root
        mode:  '0644'

    - name: start Docker service
      service:
        name: docker
        state: started

    - name: Verify that docker works
      command: docker run --rm hello-world
      ignore_errors: true

- name: install pip packages, force upgrade
  pip:
    name: "{{ pip_list }}"
    executable: pip3
    state: latest
  vars:
    pip_list:
      - setuptools
      - pip
      - virtualenv
      - chardet
      - docker

- name: install latest docker-compose from GitHub
  shell:
    cmd: |
      # retrieve latest tag / version to be downloaded
      dlVersion="$( curl -Ls -o /dev/null -w %{url_effective} https://github.com/docker/compose/releases/latest )"
      # do the download
      curl -L "https://github.com/docker/compose/releases/download/${dlVersion##*/}/docker-compose-$( uname -s )-$( uname -m )" > {{ compose_bin_location }}
      # change execution permissions
      chmod +x {{ compose_bin_location }}

- name: Set pull credentials as root user
  become: true
  command: docker login -u {{ docker_pull_user }} -p {{ docker_pull_password }} {{ docker_registry | default( '' ) }}
  when: docker_pull_user is defined and docker_pull_password is defined

- name: Set docker credentials as root user
  become: true
  no_log: True
  docker_login:
    username:       "{{ registry.username }}"
    password:       "{{ registry.password }}"
    registry_url:   "{{ registry.url            | default( 'https://index.docker.io/v1/' ) }}"
    state:          "{{ registry.state          | default( 'present' ) }}"
    tls:            "{{ registry.tls            | default( 'no' ) }}"
    validate_certs: "{{ registry.validate_certs | default( 'no' ) }}"
    timeout:        "{{ registry.timeout        | default( '60' ) }}"
    reauthorize:    "{{ registry.reauthorize    | default( 'no' ) }}"
    debug:          "{{ registry.debug          | default( 'no' ) }}"
    config_path:    "{{ registry.config_path    | default( '~/.docker/config.json' ) }}"
    api_version:    "{{ registry.api_version    | default( 'auto' ) }}"
  with_items: "{{ docker_registries | default( [] ) }}"
  loop_control:
    loop_var: registry
  when: docker_registries is defined and docker_registries | length > 0

- name: Provision AWS-Templates
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items: "{{ install_docker.aws_templates }}"
  when: aws_key is defined

# - name: Install mount script when encrypted_data exists
#   template: src=mount.encrypted_data dest=/usr/local/bin/mount.encrypted_data mode=755 owner=root group=root
#   when: encrypted_data is defined

- name: Ensure service is (re)started
  service:
    name: docker
    state: restarted
  become: yes

- name: increase aio-max-nr to prevent db_container limit
  sysctl:
    name:  'fs.aio-max-nr'
    value: '1048576'
    state: present
    reload: yes
  become: yes

# normally, this step should not be necessary due to systemd deprecating runlevel –
# but without it did not work properly ...
- name: prepare runlevel as well
  become: yes
  command: rm /etc/rc{1..3}.d/*docker
  # may throw an exception if the runlevel files do not exist ...
  args:
    warn: false
  ignore_errors: yes

- name: install docker-compose
  block:
    - name: Retrieve latest docker-compose information
      uri:
        url: "https://api.github.com/repos/docker/compose/releases/latest"
        method: "GET"
        return_content: yes
        status_code: 200
        body_format: json
      register: docker_compose_version_info

    - name: Install docker-compose
      become: yes
      get_url:
        url : "https://github.com/docker/compose/releases/download/{{ docker_compose_version_info.json.tag_name }}/docker-compose-Linux-x86_64"
        dest: "/usr/local/bin/docker-compose"
        mode: "u+x,g+x"
  when: installDockerCompose | default(true)

...
